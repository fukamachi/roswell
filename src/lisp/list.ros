#!/bin/sh
#|-*- mode:lisp -*-|#
#|List Information
exec ros +Q -m roswell -L sbcl-bin -- $0 "$@"
|#

(when (cl:find-package :ros.sub.list)
  (push :ros.sub.list *features*))
#-ros.sub.list
(defpackage :ros.sub.list
  (:use :cl))
(in-package :ros.sub.list)
#-ros.sub.list
(ros:quicklisp :environment nil)
#-ros.sub.list
(unless (find-package :uiop)
  (ql:quickload :uiop :silent t))
#-ros.sub.list
(defun homedir ()
  (ros:opt "homedir"))
#-ros.sub.list
(defun uname ()
  (ros:roswell '("roswell-internal-use uname") :string t))
#-ros.sub.list
(defun uname-m ()
  (ros:roswell '("roswell-internal-use uname -m") :string t))
#-ros.sub.list
(defun list-impls (impl &key function params)
  (declare (ignorable params))
  (let ((dir (directory
              (make-pathname
               :defaults (merge-pathnames
                          (format nil "impls/~A/~A/~A/" (uname-m) (uname) impl)
                          (homedir))
               :name :wild
               :type :wild))))
    (mapcar function
            dir)))
#-ros.sub.list
(progn
  (defun dump-dir (param)
    (merge-pathnames (format nil "impls/~A/~A/~A/dump/"
                             (uname-m) (uname) param)
                     (homedir)))
  (export
   (defun installed (&rest r)
     (cond
       ((null r)
        (format t "detail shown by~%~A list installed [implemntation]~2%implementations:~%"
                (ros:opt "argv0"))
        (let ((dir (directory
                    (make-pathname
                     :defaults (merge-pathnames
                                (format nil "impls/~A/~A/" (uname-m) (uname))
                                (homedir))
                     :name :wild
                     :type :wild))))
          (mapc (lambda (d) (format t "    ~A~%" (first (last (pathname-directory d)))))  dir)))
       ((probe-file
         (merge-pathnames
          (format nil "impls/~A/~A/~A" (uname-m) (uname) (first r))
          (homedir)))
        (list-impls (first r)
                    :function (lambda (d) (format t "~A/~A~%"
                                                  (first r)
                                                  (first (last (pathname-directory d)))))
                    :params r)))))
  (export
   (defun dump (&rest params)
     (declare (ignorable params)) ;; tbd list images not only for current image
     (format t "preserved dump lists for ~A:~%" (ros:opt "impl"))
     (format t "~{  ~A~%~}" (mapcar #'pathname-name
                                    (directory (make-pathname :name :wild
                                                              :type :wild
                                                              :defaults
                                                              (dump-dir (first params)))))))))

#-ros.sub.list
(setf (get 'installed :doc) "List implementations that already installed"
      (get 'dump :doc) "List dumped")

#-ros.sub.list
(defun main (subcmd cmd &rest r)
  (declare (ignorable cmd))
  (cond ((or (equal subcmd "help") (not r))
         (format t "Usage: ~A ~A [type] [options]~2%~20ADescription~%"
                 (ros:opt "argv0")
                 (cond ((equal subcmd "help")
                        (first r))
                       ((not r)
                        cmd))
                 "Types:")
         (do-external-symbols (i (find-package :ros.sub.list))
           (format t "~(~20A~)~A~&" i (or (get i :doc) ""))))
        (t (let* ((*read-eval*)
                  (symbol (read-from-string (first r)))
                  (f (ignore-errors (fdefinition symbol))))
             (if (and f (eql :external (nth-value 1 (find-symbol (string symbol)))))
                 (apply f (rest r))
                 (format t "not suppported type for list~%"))))))
